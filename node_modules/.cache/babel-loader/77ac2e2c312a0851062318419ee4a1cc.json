{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAIKEN\\\\react3\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './components/store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInUser = localStorage.getItem('isLoggedIn'); // obtains the stored isLoggegIn\n\n    if (storedUserLoggedInUser === '1') {\n      setIsLoggedIn(true); // sets logged in to true if it already ahs email and password stored\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1'); // creates a localStorage when user enters the email and password\n\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/SAIKEN/react3/src/App.js"],"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInUser","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","onLogout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAGAC,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMQ,sBAAsB,GAAEC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA9B,CADY,CACqD;;AAEjE,QAAIF,sBAAsB,KAAK,GAA/B,EAAmC;AACjCD,MAAAA,aAAa,CAAC,IAAD,CAAb,CADiC,CACb;AACrB;AACF,GANQ,EAMP,EANO,CAAT;;AAQA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAkC,GAAlC,EAHwC,CAGD;;AACvCP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GALD;;AAOA,QAAMQ,aAAa,GAAG,MAAM;AAC1BN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB;AACAT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAG;AAACD,MAAAA,UAAU,EAACA,UAAZ;AAAwBW,MAAAA,QAAQ,EAACF;AAAjC,KAA9B;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACG,CAACT,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGL,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAES;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAjCQV,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport Login from './components/Login/Login';\r\nimport Home from './components/Home/Home';\r\nimport MainHeader from './components/MainHeader/MainHeader';\r\nimport AuthContext from './components/store/auth-context';\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n\r\n  useEffect(()=>{ \r\n    const storedUserLoggedInUser= localStorage.getItem('isLoggedIn') // obtains the stored isLoggegIn\r\n\r\n    if (storedUserLoggedInUser === '1'){ \r\n      setIsLoggedIn(true);// sets logged in to true if it already ahs email and password stored\r\n    }\r\n  },[]);\r\n  \r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem('isLoggedIn','1') // creates a localStorage when user enters the email and password\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem('isLoggedIn')\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={ {isLoggedIn:isLoggedIn, onLogout:logoutHandler} }>\r\n      <MainHeader />\r\n      <main>\r\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\r\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\r\n      </main>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}