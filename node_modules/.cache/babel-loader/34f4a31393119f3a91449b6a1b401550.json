{"ast":null,"code":"var _jsxFileName = \"/Users/saikenho/javascript/01-starting-project 3/src/components/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n}); //component wide state \n// CREATE another object to manage the state of login  and logout\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInUser = localStorage.getItem('isLoggedIn'); // obtains the stored isLoggegIn\n\n    if (storedUserLoggedInUser === '1') {\n      setIsLoggedIn(true); // sets logged in to true if it already ahs email and password stored\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = () => {\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: [props.children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"2709DAL2EGgmloEjI1vhdgjsHq4=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/saikenho/javascript/01-starting-project 3/src/components/store/auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInUser","localStorage","getItem","logoutHandler","removeItem","loginHandler","setItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AAEpCC,EAAAA,UAAU,EAAC,KAFyB;AAGpCC,EAAAA,QAAQ,EAAC,MAAM,CAAG,CAHkB;AAIpCC,EAAAA,OAAO,EAAC,CAACC,KAAD,EAAOC,QAAP,KAAkB,CAAE;AAJQ,CAApB,CAApB,C,CAKI;AAEJ;;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAD,IAAU;AAAA;;AAExC,QAAM,CAACN,UAAD,EAAYO,aAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMW,sBAAsB,GAAEC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA9B,CADU,CACuD;;AAEjE,QAAIF,sBAAsB,KAAK,GAA/B,EAAmC;AACjCD,MAAAA,aAAa,CAAC,IAAD,CAAb,CADiC,CACb;AACrB;AACF,GANM,EAML,EANK,CAAT;;AAQA,QAAMI,aAAa,GAAE,MAAM;AACvBF,IAAAA,YAAY,CAACG,UAAb,CAAwB,YAAxB;AACAL,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;;AAKA,QAAMM,YAAY,GAAC,MAAK;AACpBJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAkC,GAAlC;AACAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GAHD;;AAIA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAG;AAACP,MAAAA,UAAU,EAACA,UAAZ;AAAwBC,MAAAA,QAAQ,EAACU,aAAjC;AAA+CT,MAAAA,OAAO,EAACW;AAAvD,KAA9B;AAAA,eAAsGP,KAAK,CAACS,QAA5G;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAzBM;;GAAMV,mB;;KAAAA,mB;AA2Bb,eAAeP,WAAf","sourcesContent":["import React, {useState,useEffect} from 'react' ; \n\nconst AuthContext = React.createContext({\n\n    isLoggedIn:false,\n    onLogout:() => { }, \n    onLogin:(email,password)=>{}\n}); //component wide state \n\n// CREATE another object to manage the state of login  and logout\n\nexport const AuthContextProvider= (props)=> {  \n\n    const [isLoggedIn,setIsLoggedIn]= useState(false); \n    \n    useEffect(()=>{ \n        const storedUserLoggedInUser= localStorage.getItem('isLoggedIn') // obtains the stored isLoggegIn\n    \n        if (storedUserLoggedInUser === '1'){ \n          setIsLoggedIn(true);// sets logged in to true if it already ahs email and password stored\n        }\n      },[]);\n    \n    const logoutHandler= () => { \n        localStorage.removeItem('isLoggedIn')\n        setIsLoggedIn(false);\n    } ; \n\n    const loginHandler=()=> { \n        localStorage.setItem('isLoggedIn','1')\n        setIsLoggedIn(true);\n    }; \n    return ( \n        <AuthContext.Provider value={ {isLoggedIn:isLoggedIn, onLogout:logoutHandler,onLogin:loginHandler} }>{props.children} </AuthContext.Provider>\n    )\n\n}\n\nexport default AuthContext; "]},"metadata":{},"sourceType":"module"}