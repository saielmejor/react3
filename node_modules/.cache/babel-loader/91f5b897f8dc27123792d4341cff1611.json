{"ast":null,"code":"var _jsxFileName = \"/Users/saikenho/javascript/01-starting-project 3/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button'; //creates a emailReducer function outside of the component \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type == 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type == 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    }; //checks if it includes the \"a \" from latest state snapshot\n  }\n\n  return {\n    value: ' ',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); // reducer function \n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: ' ',\n    isValid: null\n  }); // set is valid to null so it doesnt input_blur \n  // useEffect(()=> { \n  //   const identifier= setTimeout(()=>{ \n  //     console.log('CHECK FORM VALIDITY')\n  //     setFormIsValid(\n  //       enteredEmail.includes('@') && enteredPassword.trim().length > 6\n  //     );\n  //   },500); // check form validity after user stopped typing for 500 ms \n  //  return () => { \n  // console.log('CLEANUP')\n  // clearTimeout(identifier); // cleartime out is used to clear the previous timer from last key stroke\n  //  }; //cleanup function runs after form validation function occurs \n  // },[enteredEmail,enteredPassword]);\n\n  const emailChangeHandler = event => {\n    //add dispatch function\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // gets type user input and target value \n\n    setFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6);\n  };\n\n  const passwordChangeHandler = event => {\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n    setEnteredPassword(event.target.value);\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    }); // we dont need to add val because we dont need to add any value \n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"cllbIksqWC6iC2k1R/rbns2L9qs=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/saikenho/javascript/01-starting-project 3/src/components/Login/Login.js"],"names":["React","useEffect","useState","useReducer","Card","classes","Button","emailReducer","state","action","type","value","val","isValid","includes","Login","props","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","emailState","dispatchEmail","emailChangeHandler","event","target","trim","length","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState,useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\n//creates a emailReducer function outside of the component \nconst emailReducer=(state,action)=> { \n  if (action.type =='USER_INPUT') { \n    return {value:action.val, isValid:action.val.includes('@')}\n  }\n  if (action.type=='INPUT_BLUR'){ \n    return { value:state.value, isValid:state.value.includes('@')} ; //checks if it includes the \"a \" from latest state snapshot\n  }\nreturn {value:' ', isValid:false} ;\n};\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n// reducer function \n\nconst [emailState,dispatchEmail]= useReducer(emailReducer,{value:' ', isValid:null}) // set is valid to null so it doesnt input_blur \n\n// useEffect(()=> { \n\n//   const identifier= setTimeout(()=>{ \n//     console.log('CHECK FORM VALIDITY')\n//     setFormIsValid(\n//       enteredEmail.includes('@') && enteredPassword.trim().length > 6\n//     );\n//   },500); // check form validity after user stopped typing for 500 ms \n//  return () => { \n// console.log('CLEANUP')\n// clearTimeout(identifier); // cleartime out is used to clear the previous timer from last key stroke\n\n//  }; //cleanup function runs after form validation function occurs \n// },[enteredEmail,enteredPassword]);\n\n  const emailChangeHandler = (event) => {\n    //add dispatch function\n    dispatchEmail({type:'USER_INPUT', val:event.target.value})// gets type user input and target value \n   setFormIsValid( event.target.value.includes('@') && enteredPassword.trim().length > 6);\n    \n    \n   \n  };\n\n  const passwordChangeHandler = (event) => {\n    setFormIsValid( emailState.isValid && event.target.value.trim().length > 6);\n    setEnteredPassword(event.target.value);\n\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({type:'INPUT_BLUR',}) // we dont need to add val because we dont need to add any value \n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}